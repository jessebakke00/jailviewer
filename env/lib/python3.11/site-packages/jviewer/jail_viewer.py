
import os, sys
from bs4 import BeautifulSoup
import string
import time
import requests
import sqlite3
import configparser


JAIL_LOGGING = True

class JailViewer(object):
  def __init__(self, base_url):
    self.base_url = base_url
    
  def get_counties_list(self):
    url = 'https://en.wikipedia.org/wiki/List_of_United_States_counties_and_county_equivalents'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    counties = soup.find_all('table', class_='wikitable')
    county_list = []
    county_dict = {}
    for county in counties:
      c_name = county.find_all('tr')
      for c in c_name:
        x = c.find_all('td')
        for y in x:
          j = y.find_all('a')
          
          for k in j:
            try:
              
              county, state = str(k['title']).split(',')
              
              county_list.append({'state':state, 'county':county})
              
            except:
              pass
    for c in county_list:
      
      search_url = 'https://www.google.com/search?q=' + str(c["county"]).strip(' ') + '+county+' + str(c["state"]).strip(' ') + '+jail+viewer&oq=' + str(c["county"]) + '+' + str(c["state"]) + '+county+jail+viewer&gs_lcrp=EgZjaHJvbWUqBggAEEUYOzIGCAAQRRg7MgcIARAAGIAEMgcIAhAAGIAEMgYIAxBFGEAyBggEEEUYOTIICAUQABgWGB4yCAgGEAAYFhgeMggIBxAAGBYYHjIICAgQABgWGB4yCAgJEAAYFhgeqAIAsAIA&sourceid=chrome&ie=UTF-8'
      response = requests.get(search_url)
      print(response.text)
      time.sleep(1)
      
    #return county_list
    
  def get_sweetwater(self):
    
    inmate_info_dict = {}
    inmate_dict = {}
    inmate_info_list = []
    inmate_list = []
    pages = range(1,12)
        
    for page in pages:
      url = self.base_url + str(page)
      response = requests.get(url)
      soup = BeautifulSoup(response.text, 'html.parser')
      inmate_info_div = soup.find_all("div", class_="inmateinfo")
      
      for inmate in inmate_info_div:
        details = inmate.find_all('div', class_='inmatedetails')
        charges = inmate.find_all('li', class_='offenseName')
        
        for detail in details:
          inmate_info_list.append(detail.contents[1])
          
        names = str(inmate.h2.contents[0]).split(' ')
        n = ['last_name', 'first_name', 'middle_name']
        j = 0
        
        try:
          book_id = self.create_book_id(str(names[0][:-1]), str(names[1]), str(names[2]))
          inmate_dict = {
            'book_id': book_id,
            'last_name':names[0][:-1],
            'first_name':names[1],
            'middle_name':names[2],
            'age': inmate_info_list[0],
            'address': inmate_info_list[1],
            'status': inmate_info_list[2],
            'book_date': inmate_info_list[4],
            'release_date': inmate_info_list[3],
            'arresting_agency': inmate_info_list[5]
          }
        except:
          print('must have had an error!')
            
        inmate_list.append(inmate_dict)
        inmate_info_list = []      
        inmate_dict = {}
        
      time.sleep(1)
      for i in inmate_list:
        for key in i.keys():
          print(key, i[key])
        print('\n')
    return inmate_list  



  def create_book_id(self, *args, **kwargs):
    letter_dict = {}
    letter_list = []
    booking_number = ''
    counter = 0
    for letter in string.ascii_uppercase:
      letter_dict[letter] = counter
      # letter_list.append({str(letter):counter})
      # print('before', counter)
      counter += 1
      # print('after', counter)
    # print(args[0])
    # print(args[1])
    # print(args[2])
    
    name_list = []
    # first_name = str(args[0]).split()
    # middle_name = str(args[1]).split()
    # last_name = str(args[2]).split()
    # name = first_name + middle_name + last_name
    
    for arg in args:
      for l in arg:
        # print(l)
        # name_list.append(arg)
        # print(letter_dict[l])
        booking_number = booking_number + str(letter_dict[l])
        # print(type(booking_number))
    return booking_number
    
    
      
    
  
  def search(self, *args, **kwargs):
    for key in kwargs.keys():
      if str(key) == 'url':
        
        print('We have the complete url. No need to build')
        url = kwargs['url']
      elif str(key) == 'first_name' or str(key) == 'last_name':
        print('building url from name')
        url = 'http://jailviewer.co.douglas.or.us/Home/BookingSearchResult?LastName=' + str(kwargs['last_name']) + '&FirstName=' + str(kwargs['first_name']) + '&BookingFrom=&BookingTo=&ReleaseFrom=&ReleaseTo=&Status=IN+CUSTODY'
        print(url)
        
      response = requests.get(url)
      print(response.text)
      soup = BeautifulSoup(response.text, 'html.parser')
      trs = soup.find_all("td", class_='text-success')
      
      for tr in trs:
        kids = tr.children
        for kid in kids:
          page = requests.get(self.base_url + str(kid)[9:-10])
          print(page.text)
        
    
  def _build_url(self, url):
    url_list = []
    for letter in string.ascii_lowercase:
      url_list.append(str(url) + '/Home/BookingSearchResult?LastName=' + str(letter) + '%&FirstName=&BookingFrom=&BookingTo=&ReleaseFrom=&ReleaseTo=&Status=IN+CUSTODY')
    return url_list
    
  def fetch(self, url):
    counter = 0
    inmate_details = []
    inmate_dict = {}
    
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    trs = soup.find_all("td", class_='text-success')
    
    for tr in trs:
      sibs = tr.find_next_siblings("td")
      
    
      for inm in sibs:
        inmate_details.append(str(inm).strip('<>td/'))
      # print('inmate details')
      # print(inmate_details)
      # for ix in inmate_details:
      #   print(ix)
      inmate_dict[inmate_details[0]] = inmate_details[1:]
      
      inmate_details = []
    
    
    time.sleep(.5)
    return inmate_dict
    
  def run(self):
    results_list = []
    results_dict = {}
    inmate_dict = {}
    counter = 0
    
    url_list = self._build_url(self.base_url)
    
    for url in url_list:  
      results = self.fetch(url)
      
      results_list.append(results)
      
      
      
    for result in results_list:
      results_dict[string.ascii_lowercase[counter]] = result
      # print('result')
      # print(result)
      counter = counter + 1
      
    for key in results_dict.keys():
      for a_key in results_dict[key]:
        inmate_dict[a_key] = results_dict[key][a_key]
      
      
    
    return inmate_dict

  
  def get_charges(self, book_id, **kwargs):
    print('Getting Charges ...')
    charge_list = []
    charge_dict = {}
    try:
      for key in kwargs.keys():
        f_name = kwargs['f_name']
        l_name = kwargs['l_name']
    except: pass
       
      
    search_by_name_url = ''
    url = self.base_url + 'Home/BookingSearchDetail?BookingNumber=' + str(book_id)
    
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    pnl_head = soup.find_all('span', class_='text-danger')
    
    for child in pnl_head:      
      clean_str = str(child.strong).strip("<strong>/")
      charge_list.append(clean_str)
    charge_dict[book_id] = charge_list
    
    # print('charges for ...' + str(book_id))
    #print(book_id)
    # for chg in charge_dict[book_id]:
    #   print(chg)
    print(charge_dict)
    return charge_dict
      
      

if __name__ == '__main__':
  jail_view = JailViewer('http://jailviewer.co.douglas.or.us/')
  curr = jail_view.current_inmates()
  print(curr)
  
      

      
